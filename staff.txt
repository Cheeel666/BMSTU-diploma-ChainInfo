

(*mux.Router)(0x14000196300)({
 NotFoundHandler: (http.Handler) <nil>,
 MethodNotAllowedHandler: (http.Handler) <nil>,
 routes: ([]*mux.Route) (len=2 cap=2) {
  (*mux.Route)(0x140000d5040)({
   handler: (*rpc.Server)(0x140000fe280)({
    codecs: (map[string]rpc.Codec) (len=2) {
     (string) (len=16) "application/json": (*json.Codec)(0x104bb9c68)({
     }),
     (string) (len=30) "application/json;charset=utf-8": (*json.Codec)(0x104bb9c68)({
     })
    },
    services: (*rpc.serviceMap)(0x140000a3110)({
     mutex: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
     },
     services: (map[string]*rpc.service) (len=1) {
      (string) (len=15) "MedichainRemote": (*rpc.service)(0x140000fe2c0)({
       name: (string) (len=15) "MedichainRemote",
       rcvr: (reflect.Value) <*remoteRPC.MedRecRemote Value>,
       rcvrType: (*reflect.rtype)(0x1048a08e0)(*remoteRPC.MedRecRemote),
       methods: (map[string]*rpc.serviceMethod) (len=11) {
        (string) (len=21) "SetPermissionDuration": (*rpc.serviceMethod)(0x140000c8e70)({
         method: (reflect.Method) {
          Name: (string) (len=21) "SetPermissionDuration",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6200)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error Value>,
          Index: (int) 9
         },
         argsType: (*reflect.rtype)(0x104898980)(remoteRPC.AddPermissionArgs),
         replyType: (*reflect.rtype)(0x1048646e0)(remoteRPC.AddPermissionReply)
        }),
        (string) (len=13) "ChangeAccount": (*rpc.serviceMethod)(0x140000c8af0)({
         method: (reflect.Method) {
          Name: (string) (len=13) "ChangeAccount",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6280)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.ChangeAccountArgs, *remoteRPC.ChangeAccountReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.ChangeAccountArgs, *remoteRPC.ChangeAccountReply) error Value>,
          Index: (int) 1
         },
         argsType: (*reflect.rtype)(0x104881e40)(remoteRPC.ChangeAccountArgs),
         replyType: (*reflect.rtype)(0x1048524e0)(remoteRPC.ChangeAccountReply)
        }),
        (string) (len=15) "CheckPermission": (*rpc.serviceMethod)(0x140000c8b60)({
         method: (reflect.Method) {
          Name: (string) (len=15) "CheckPermission",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6300)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.CheckPermissionArgs, *remoteRPC.CheckPermissionReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.CheckPermissionArgs, *remoteRPC.CheckPermissionReply) error Value>,
          Index: (int) 2
         },
         argsType: (*reflect.rtype)(0x104881f00)(remoteRPC.CheckPermissionArgs),
         replyType: (*reflect.rtype)(0x104872f20)(remoteRPC.CheckPermissionReply)
        }),
        (string) (len=16) "PatientDocuments": (*rpc.serviceMethod)(0x140000c8cb0)({
         method: (reflect.Method) {
          Name: (string) (len=16) "PatientDocuments",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6480)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.PatientDocumentsArgs, *remoteRPC.PatientDocumentsReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.PatientDocumentsArgs, *remoteRPC.PatientDocumentsReply) error Value>,
          Index: (int) 5
         },
         argsType: (*reflect.rtype)(0x104881fc0)(remoteRPC.PatientDocumentsArgs),
         replyType: (*reflect.rtype)(0x1048731a0)(remoteRPC.PatientDocumentsReply)
        }),
        (string) (len=16) "RemovePermission": (*rpc.serviceMethod)(0x140000c8e00)({
         method: (reflect.Method) {
          Name: (string) (len=16) "RemovePermission",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6600)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.RemovePermissionArgs, *remoteRPC.RemovePermissionReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.RemovePermissionArgs, *remoteRPC.RemovePermissionReply) error Value>,
          Index: (int) 8
         },
         argsType: (*reflect.rtype)(0x104882200)(remoteRPC.RemovePermissionArgs),
         replyType: (*reflect.rtype)(0x1048647e0)(remoteRPC.RemovePermissionReply)
        }),
        (string) (len=14) "ProviderFaucet": (*rpc.serviceMethod)(0x140000c8d90)({
         method: (reflect.Method) {
          Name: (string) (len=14) "ProviderFaucet",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6580)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.ProviderFaucetArgs, *remoteRPC.ProviderFaucetReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.ProviderFaucetArgs, *remoteRPC.ProviderFaucetReply) error Value>,
          Index: (int) 7
         },
         argsType: (*reflect.rtype)(0x1048911e0)(remoteRPC.ProviderFaucetArgs),
         replyType: (*reflect.rtype)(0x1048732e0)(remoteRPC.ProviderFaucetReply)
        }),
        (string) (len=22) "SetPermissionStartTime": (*rpc.serviceMethod)(0x140000c8ee0)({
         method: (reflect.Method) {
          Name: (string) (len=22) "SetPermissionStartTime",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6200)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error Value>,
          Index: (int) 10
         },
         argsType: (*reflect.rtype)(0x104898980)(remoteRPC.AddPermissionArgs),
         replyType: (*reflect.rtype)(0x1048646e0)(remoteRPC.AddPermissionReply)
        }),
        (string) (len=13) "AddPermission": (*rpc.serviceMethod)(0x140000c8a80)({
         method: (reflect.Method) {
          Name: (string) (len=13) "AddPermission",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6200)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.AddPermissionArgs, *remoteRPC.AddPermissionReply) error Value>,
          Index: (int) 0
         },
         argsType: (*reflect.rtype)(0x104898980)(remoteRPC.AddPermissionArgs),
         replyType: (*reflect.rtype)(0x1048646e0)(remoteRPC.AddPermissionReply)
        }),
        (string) (len=14) "GetPermissions": (*rpc.serviceMethod)(0x140000c8bd0)({
         method: (reflect.Method) {
          Name: (string) (len=14) "GetPermissions",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6380)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.GetPermissionsArgs, *remoteRPC.GetPermissionsReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.GetPermissionsArgs, *remoteRPC.GetPermissionsReply) error Value>,
          Index: (int) 3
         },
         argsType: (*reflect.rtype)(0x104872fc0)(remoteRPC.GetPermissionsArgs),
         replyType: (*reflect.rtype)(0x104873060)(remoteRPC.GetPermissionsReply)
        }),
        (string) (len=18) "GetProviderAccount": (*rpc.serviceMethod)(0x140000c8c40)({
         method: (reflect.Method) {
          Name: (string) (len=18) "GetProviderAccount",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6400)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.GetProviderAccountArgs, *remoteRPC.GetProviderAccountReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.GetProviderAccountArgs, *remoteRPC.GetProviderAccountReply) error Value>,
          Index: (int) 4
         },
         argsType: (*reflect.rtype)(0x104873100)(remoteRPC.GetProviderAccountArgs),
         replyType: (*reflect.rtype)(0x104864760)(remoteRPC.GetProviderAccountReply)
        }),
        (string) (len=13) "PatientFaucet": (*rpc.serviceMethod)(0x140000c8d20)({
         method: (reflect.Method) {
          Name: (string) (len=13) "PatientFaucet",
          PkgPath: (string) "",
          Type: (*reflect.rtype)(0x140000c6500)(func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.PatientFaucetArgs, *remoteRPC.PatientFaucetReply) error),
          Func: (reflect.Value) <func(*remoteRPC.MedRecRemote, *http.Request, *remoteRPC.PatientFaucetArgs, *remoteRPC.PatientFaucetReply) error Value>,
          Index: (int) 6
         },
         argsType: (*reflect.rtype)(0x104882080)(remoteRPC.PatientFaucetArgs),
         replyType: (*reflect.rtype)(0x104873240)(remoteRPC.PatientFaucetReply)
        })
       }
      })
     }
    }),
    interceptFunc: (func(*rpc.RequestInfo) *http.Request) <nil>,
    beforeFunc: (func(*rpc.RequestInfo)) <nil>,
    afterFunc: (func(*rpc.RequestInfo)) <nil>,
    validateFunc: (reflect.Value) <invalid Value>
   }),
   buildOnly: (bool) false,
   name: (string) "",
   err: (error) <nil>,
   namedRoutes: (map[string]*mux.Route) {
   },
   routeConf: (mux.routeConf) {
    useEncodedPath: (bool) false,
    strictSlash: (bool) false,
    skipClean: (bool) false,
    regexp: (mux.routeRegexpGroup) {
     host: (*mux.routeRegexp)(<nil>),
     path: (*mux.routeRegexp)(0x140000c9110)({
      template: (string) (len=10) "/remoteRPC",
      regexpType: (mux.regexpType) 0,
      options: (mux.routeRegexpOptions) {
       strictSlash: (bool) false,
       useEncodedPath: (bool) false
      },
      regexp: (*regexp.Regexp)(0x140000d5180)(^/remoteRPC$),
      reverse: (string) (len=10) "/remoteRPC",
      varsN: ([]string) {
      },
      varsR: ([]*regexp.Regexp) {
      },
      wildcardHostPort: (bool) false
     }),
     queries: ([]*mux.routeRegexp) {
     }
    },
    matchers: ([]mux.matcher) (len=1 cap=1) {
     (*mux.routeRegexp)(0x140000c9110)({
      template: (string) (len=10) "/remoteRPC",
      regexpType: (mux.regexpType) 0,
      options: (mux.routeRegexpOptions) {
       strictSlash: (bool) false,
       useEncodedPath: (bool) false
      },
      regexp: (*regexp.Regexp)(0x140000d5180)(^/remoteRPC$),
      reverse: (string) (len=10) "/remoteRPC",
      varsN: ([]string) {
      },
      varsR: ([]*regexp.Regexp) {
      },
      wildcardHostPort: (bool) false
     })
    },
    buildScheme: (string) "",
    buildVarsFunc: (mux.BuildVarsFunc) <nil>
   }
  }),
  (*mux.Route)(0x140000d5220)({
   handler: (*negroni.Negroni)(0x140000a5ec0)({
    middleware: (negroni.middleware) {
     handler: (negroni.HandlerFunc) 0x104693250,
     next: (*negroni.middleware)(0x140000ac660)({
      handler: (negroni.HandlerFunc) 0x1046b6ea0,
      next: (*negroni.middleware)(0x140000ac678)({
       handler: (negroni.HandlerFunc) 0x1046b81e0,
       next: (*negroni.middleware)(0x140000ac690)({
        handler: (negroni.Handler) <nil>,
        next: (*negroni.middleware)(<nil>)
       })
      })
     })
    },
    handlers: ([]negroni.Handler) (len=2 cap=2) {
     (negroni.HandlerFunc) 0x104693250,
     (negroni.HandlerFunc) 0x1046b6ea0
    }
   }),
   buildOnly: (bool) false,
   name: (string) "",
   err: (error) <nil>,
   namedRoutes: (map[string]*mux.Route) {
   },
   routeConf: (mux.routeConf) {
    useEncodedPath: (bool) false,
    strictSlash: (bool) false,
    skipClean: (bool) false,
    regexp: (mux.routeRegexpGroup) {
     host: (*mux.routeRegexp)(<nil>),
     path: (*mux.routeRegexp)(0x140000c9730)({
      template: (string) (len=9) "/localRPC",
      regexpType: (mux.regexpType) 0,
      options: (mux.routeRegexpOptions) {
       strictSlash: (bool) false,
       useEncodedPath: (bool) false
      },
      regexp: (*regexp.Regexp)(0x140000d5360)(^/localRPC$),
      reverse: (string) (len=9) "/localRPC",
      varsN: ([]string) {
      },
      varsR: ([]*regexp.Regexp) {
      },
      wildcardHostPort: (bool) false
     }),
     queries: ([]*mux.routeRegexp) {
     }
    },
    matchers: ([]mux.matcher) (len=1 cap=1) {
     (*mux.routeRegexp)(0x140000c9730)({
      template: (string) (len=9) "/localRPC",
      regexpType: (mux.regexpType) 0,
      options: (mux.routeRegexpOptions) {
       strictSlash: (bool) false,
       useEncodedPath: (bool) false
      },
      regexp: (*regexp.Regexp)(0x140000d5360)(^/localRPC$),
      reverse: (string) (len=9) "/localRPC",
      varsN: ([]string) {
      },
      varsR: ([]*regexp.Regexp) {
      },
      wildcardHostPort: (bool) false
     })
    },
    buildScheme: (string) "",
    buildVarsFunc: (mux.BuildVarsFunc) <nil>
   }
  })
 },
 namedRoutes: (map[string]*mux.Route) {
 },
 KeepContext: (bool) false,
 middlewares: ([]mux.middleware) <nil>,
 routeConf: (mux.routeConf) {
  useEncodedPath: (bool) false,
  strictSlash: (bool) false,
  skipClean: (bool) false,
  regexp: (mux.routeRegexpGroup) {
   host: (*mux.routeRegexp)(<nil>),
   path: (*mux.routeRegexp)(<nil>),
   queries: ([]*mux.routeRegexp) <nil>
  },
  matchers: ([]mux.matcher) <nil>,
  buildScheme: (string) "",
  buildVarsFunc: (mux.BuildVarsFunc) <nil>
 }
})
